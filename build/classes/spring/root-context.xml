<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
   
   <!-- Root Context: defines shared resources visible to all other web components
                  (다른 웹 구성요소에 표시되는 공유 자원을 정의하는 곳)
      서버 구동 -> web.xml을 먼저 읽음 -> web.xml 내용 중 가장 먼저 읽어지는 파일
      
      DB 연결 정보(JDBC, Mybatis, Connection Pool),
      트랜잭션 처리 정보, 파일 업로드, AOP 관련 설정 등을 작성함.
   -->
   
   <!-- JDBCTemplate -> Connection 객체 사용
       DBCP -> DataSource 객체 사용(Connection객체를 한번 더 감싼 객체)
    -->
    
    <!-- 
       BasicDataSource dataSource = new BasicDataSource();
     -->
    <!-- destroy-method="close" : 주어진 SqlSession 작업이 종료되면 close 하라는 의미 -->
    
     
       <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="org.mariadb.jdbc.Driver"></property>
	<property name="url" value="jdbc:mariadb://database-1.chygdhuk6ke6.ap-northeast-2.rds.amazonaws.com:3306/HOME"></property>
	<property name="username" value="m63mini"></property>
	<property name="password" value="asdf092274"></property>
	</bean>
     
    
   <!-- 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
    <bean id="transactionManager"
       class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
       <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 트랜잭션 매니저 추가 후 xml namespace -->
    <tx:annotation-driven/>
    <!-- @Transactional 어노테이션을 인식하여 트랜잭션 처리를 진행해라
       등록된 bean 중 @Transactional 어노테이션이 붙은 메소드를 찾아
       트랜잭션 처리를 할 수 있도록 트랜잭션 어드바이스를 적용 -->
       
       <!-- 
         SqlSession : sql구문을 DB에 전달, 실행하는 객체
         SqlSessionFactory : SqlSession을 만드는 객체
         sqlSessionFactoryBean : mybatis 설정 파일, Connection Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체
         sqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체
       -->
       
       <!-- Mybatis SqlSession Bean 등록 -->
       <bean id="sqlSessionFactoryBean"
          class="org.mybatis.spring.SqlSessionFactoryBean">
          
          <property name="configLocation" value="classpath:mybatis-config.xml"/>
          <property name="dataSource" ref="dataSource"/>
           <property name="mapperLocations" value="classpath*:/mybatis/sql/*.xml"></property>
       </bean>
       
       <!-- SqlSessionTemplate : 기본 SQL 실행 기능을 가진 SqlSession에 트랜잭션 처리 기능 부여 -->
       <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
          <constructor-arg ref="sqlSessionFactoryBean"/>
       </bean>
       
       <!-- mail -->
	    <!--    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		    <property name="port" value="465" />
		    <property name="username" value="testforam3@gmail.com" />
		    <property name="password" value="iigbtleuuokufknk" />
		    <property name="javaMailProperties">
		    <props>
		   	  <prop key="mail.smtp.host">smtp.gmail.com</prop>
		      <prop key="mail.smtp.starttls.enable">true</prop>
		      <prop key="mail.smtp.auth">true</prop>
		      <prop key="mail.smtp.debug">true</prop>
		      <prop key="mail.smtp.socketFactory.port">465</prop>
		      <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
		      <prop key="mail.smtp.socketFactory.fallback">false</prop>		      
		    </props>
		    </property>
		  </bean> -->
<!-- 회원가입 메일 인증 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />
        <property name="username" value="testforam3@gmail.com"/>
        <property name="password" value="iigbtleuuokufknk"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
      
</beans>